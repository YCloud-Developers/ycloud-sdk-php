<?php
/**
 * WhatsappPhoneNumbersApi
 * PHP version 7.4
 *
 * @category Class
 * @package  YCloud\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * YCloud API
 *
 * The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.
 *
 * The version of the OpenAPI document: v2
 * Contact: service@ycloud.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace YCloud\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use YCloud\Client\ApiException;
use YCloud\Client\Configuration;
use YCloud\Client\HeaderSelector;
use YCloud\Client\ObjectSerializer;

/**
 * WhatsappPhoneNumbersApi Class Doc Comment
 *
 * @category Class
 * @package  YCloud\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WhatsappPhoneNumbersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation list
     *
     * List phone numbers
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $page Page number of the results to be returned, 1-based. (optional, default to 1)
     * @param  int $limit A limit on the number of results to be returned, or number of results per page, between 1 and 100, defaults to 10. (optional, default to 10)
     * @param  bool $include_total Return results inside an object that contains the total result count or not. (optional, default to false)
     * @param  string $filter_waba_id **Required if you have more than 100 WABAs.** WhatsApp Business Account ID. (optional)
     *
     * @throws \YCloud\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \YCloud\Client\Model\WhatsappPhoneNumberPage
     */
    public function list($associative_array)
    {
        list($response) = $this->listWithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation listWithHttpInfo
     *
     * List phone numbers
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $page Page number of the results to be returned, 1-based. (optional, default to 1)
     * @param  int $limit A limit on the number of results to be returned, or number of results per page, between 1 and 100, defaults to 10. (optional, default to 10)
     * @param  bool $include_total Return results inside an object that contains the total result count or not. (optional, default to false)
     * @param  string $filter_waba_id **Required if you have more than 100 WABAs.** WhatsApp Business Account ID. (optional)
     *
     * @throws \YCloud\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \YCloud\Client\Model\WhatsappPhoneNumberPage, HTTP status code, HTTP response headers (array of strings)
     */
    public function listWithHttpInfo($associative_array)
    {
        $request = $this->listRequest($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\YCloud\Client\Model\WhatsappPhoneNumberPage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\YCloud\Client\Model\WhatsappPhoneNumberPage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\YCloud\Client\Model\WhatsappPhoneNumberPage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\YCloud\Client\Model\WhatsappPhoneNumberPage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\YCloud\Client\Model\WhatsappPhoneNumberPage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listAsync
     *
     * List phone numbers
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $page Page number of the results to be returned, 1-based. (optional, default to 1)
     * @param  int $limit A limit on the number of results to be returned, or number of results per page, between 1 and 100, defaults to 10. (optional, default to 10)
     * @param  bool $include_total Return results inside an object that contains the total result count or not. (optional, default to false)
     * @param  string $filter_waba_id **Required if you have more than 100 WABAs.** WhatsApp Business Account ID. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAsync($associative_array)
    {
        return $this->listAsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAsyncWithHttpInfo
     *
     * List phone numbers
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $page Page number of the results to be returned, 1-based. (optional, default to 1)
     * @param  int $limit A limit on the number of results to be returned, or number of results per page, between 1 and 100, defaults to 10. (optional, default to 10)
     * @param  bool $include_total Return results inside an object that contains the total result count or not. (optional, default to false)
     * @param  string $filter_waba_id **Required if you have more than 100 WABAs.** WhatsApp Business Account ID. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAsyncWithHttpInfo($associative_array)
    {
        $returnType = '\YCloud\Client\Model\WhatsappPhoneNumberPage';
        $request = $this->listRequest($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'list'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $page Page number of the results to be returned, 1-based. (optional, default to 1)
     * @param  int $limit A limit on the number of results to be returned, or number of results per page, between 1 and 100, defaults to 10. (optional, default to 10)
     * @param  bool $include_total Return results inside an object that contains the total result count or not. (optional, default to false)
     * @param  string $filter_waba_id **Required if you have more than 100 WABAs.** WhatsApp Business Account ID. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listRequest($associative_array)
    {
        // unbox the parameters from the associative array
        $page = array_key_exists('page', $associative_array) ? $associative_array['page'] : 1;
        $limit = array_key_exists('limit', $associative_array) ? $associative_array['limit'] : 10;
        $include_total = array_key_exists('include_total', $associative_array) ? $associative_array['include_total'] : false;
        $filter_waba_id = array_key_exists('filter_waba_id', $associative_array) ? $associative_array['filter_waba_id'] : null;

        if ($page !== null && $page > 100) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling WhatsappPhoneNumbersApi.list, must be smaller than or equal to 100.');
        }
        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling WhatsappPhoneNumbersApi.list, must be bigger than or equal to 1.');
        }

        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling WhatsappPhoneNumbersApi.list, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling WhatsappPhoneNumbersApi.list, must be bigger than or equal to 1.');
        }


        $resourcePath = '/whatsapp/phoneNumbers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_total,
            'includeTotal', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_waba_id,
            'filter.wabaId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation register
     *
     * Register a phone number
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number ID. (required)
     *
     * @throws \YCloud\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \YCloud\Client\Model\WhatsappPhoneNumber|\YCloud\Client\Model\ErrorResponse
     */
    public function register($waba_id, $phone_number)
    {
        list($response) = $this->registerWithHttpInfo($waba_id, $phone_number);
        return $response;
    }

    /**
     * Operation registerWithHttpInfo
     *
     * Register a phone number
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number ID. (required)
     *
     * @throws \YCloud\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \YCloud\Client\Model\WhatsappPhoneNumber|\YCloud\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function registerWithHttpInfo($waba_id, $phone_number)
    {
        $request = $this->registerRequest($waba_id, $phone_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\YCloud\Client\Model\WhatsappPhoneNumber' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\YCloud\Client\Model\WhatsappPhoneNumber' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\YCloud\Client\Model\WhatsappPhoneNumber', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\YCloud\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\YCloud\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\YCloud\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\YCloud\Client\Model\WhatsappPhoneNumber';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\YCloud\Client\Model\WhatsappPhoneNumber',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\YCloud\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation registerAsync
     *
     * Register a phone number
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number ID. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function registerAsync($waba_id, $phone_number)
    {
        return $this->registerAsyncWithHttpInfo($waba_id, $phone_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation registerAsyncWithHttpInfo
     *
     * Register a phone number
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number ID. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function registerAsyncWithHttpInfo($waba_id, $phone_number)
    {
        $returnType = '\YCloud\Client\Model\WhatsappPhoneNumber';
        $request = $this->registerRequest($waba_id, $phone_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'register'
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number ID. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function registerRequest($waba_id, $phone_number)
    {
        // verify the required parameter 'waba_id' is set
        if ($waba_id === null || (is_array($waba_id) && count($waba_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $waba_id when calling register'
            );
        }
        // verify the required parameter 'phone_number' is set
        if ($phone_number === null || (is_array($phone_number) && count($phone_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phone_number when calling register'
            );
        }

        $resourcePath = '/whatsapp/phoneNumbers/{wabaId}/{phoneNumber}/register';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($waba_id !== null) {
            $resourcePath = str_replace(
                '{' . 'wabaId' . '}',
                ObjectSerializer::toPathValue($waba_id),
                $resourcePath
            );
        }
        // path params
        if ($phone_number !== null) {
            $resourcePath = str_replace(
                '{' . 'phoneNumber' . '}',
                ObjectSerializer::toPathValue($phone_number),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieve
     *
     * Retrieve a phone number
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     *
     * @throws \YCloud\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \YCloud\Client\Model\WhatsappPhoneNumber|\YCloud\Client\Model\ErrorResponse
     */
    public function retrieve($waba_id, $phone_number)
    {
        list($response) = $this->retrieveWithHttpInfo($waba_id, $phone_number);
        return $response;
    }

    /**
     * Operation retrieveWithHttpInfo
     *
     * Retrieve a phone number
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     *
     * @throws \YCloud\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \YCloud\Client\Model\WhatsappPhoneNumber|\YCloud\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveWithHttpInfo($waba_id, $phone_number)
    {
        $request = $this->retrieveRequest($waba_id, $phone_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\YCloud\Client\Model\WhatsappPhoneNumber' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\YCloud\Client\Model\WhatsappPhoneNumber' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\YCloud\Client\Model\WhatsappPhoneNumber', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\YCloud\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\YCloud\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\YCloud\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\YCloud\Client\Model\WhatsappPhoneNumber';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\YCloud\Client\Model\WhatsappPhoneNumber',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\YCloud\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveAsync
     *
     * Retrieve a phone number
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveAsync($waba_id, $phone_number)
    {
        return $this->retrieveAsyncWithHttpInfo($waba_id, $phone_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveAsyncWithHttpInfo
     *
     * Retrieve a phone number
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveAsyncWithHttpInfo($waba_id, $phone_number)
    {
        $returnType = '\YCloud\Client\Model\WhatsappPhoneNumber';
        $request = $this->retrieveRequest($waba_id, $phone_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieve'
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retrieveRequest($waba_id, $phone_number)
    {
        // verify the required parameter 'waba_id' is set
        if ($waba_id === null || (is_array($waba_id) && count($waba_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $waba_id when calling retrieve'
            );
        }
        // verify the required parameter 'phone_number' is set
        if ($phone_number === null || (is_array($phone_number) && count($phone_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phone_number when calling retrieve'
            );
        }

        $resourcePath = '/whatsapp/phoneNumbers/{wabaId}/{phoneNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($waba_id !== null) {
            $resourcePath = str_replace(
                '{' . 'wabaId' . '}',
                ObjectSerializer::toPathValue($waba_id),
                $resourcePath
            );
        }
        // path params
        if ($phone_number !== null) {
            $resourcePath = str_replace(
                '{' . 'phoneNumber' . '}',
                ObjectSerializer::toPathValue($phone_number),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveCommerceSettings
     *
     * Retrieve commerce settings
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     *
     * @throws \YCloud\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \YCloud\Client\Model\WhatsappCommerceSettings|\YCloud\Client\Model\ErrorResponse
     */
    public function retrieveCommerceSettings($waba_id, $phone_number)
    {
        list($response) = $this->retrieveCommerceSettingsWithHttpInfo($waba_id, $phone_number);
        return $response;
    }

    /**
     * Operation retrieveCommerceSettingsWithHttpInfo
     *
     * Retrieve commerce settings
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     *
     * @throws \YCloud\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \YCloud\Client\Model\WhatsappCommerceSettings|\YCloud\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveCommerceSettingsWithHttpInfo($waba_id, $phone_number)
    {
        $request = $this->retrieveCommerceSettingsRequest($waba_id, $phone_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\YCloud\Client\Model\WhatsappCommerceSettings' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\YCloud\Client\Model\WhatsappCommerceSettings' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\YCloud\Client\Model\WhatsappCommerceSettings', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\YCloud\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\YCloud\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\YCloud\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\YCloud\Client\Model\WhatsappCommerceSettings';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\YCloud\Client\Model\WhatsappCommerceSettings',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\YCloud\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveCommerceSettingsAsync
     *
     * Retrieve commerce settings
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveCommerceSettingsAsync($waba_id, $phone_number)
    {
        return $this->retrieveCommerceSettingsAsyncWithHttpInfo($waba_id, $phone_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveCommerceSettingsAsyncWithHttpInfo
     *
     * Retrieve commerce settings
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveCommerceSettingsAsyncWithHttpInfo($waba_id, $phone_number)
    {
        $returnType = '\YCloud\Client\Model\WhatsappCommerceSettings';
        $request = $this->retrieveCommerceSettingsRequest($waba_id, $phone_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveCommerceSettings'
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retrieveCommerceSettingsRequest($waba_id, $phone_number)
    {
        // verify the required parameter 'waba_id' is set
        if ($waba_id === null || (is_array($waba_id) && count($waba_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $waba_id when calling retrieveCommerceSettings'
            );
        }
        // verify the required parameter 'phone_number' is set
        if ($phone_number === null || (is_array($phone_number) && count($phone_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phone_number when calling retrieveCommerceSettings'
            );
        }

        $resourcePath = '/whatsapp/phoneNumbers/{wabaId}/{phoneNumber}/whatsappCommerceSettings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($waba_id !== null) {
            $resourcePath = str_replace(
                '{' . 'wabaId' . '}',
                ObjectSerializer::toPathValue($waba_id),
                $resourcePath
            );
        }
        // path params
        if ($phone_number !== null) {
            $resourcePath = str_replace(
                '{' . 'phoneNumber' . '}',
                ObjectSerializer::toPathValue($phone_number),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveProfile
     *
     * Retrieve a phone number profile
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     *
     * @throws \YCloud\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \YCloud\Client\Model\WhatsappPhoneNumberProfile|\YCloud\Client\Model\ErrorResponse
     */
    public function retrieveProfile($waba_id, $phone_number)
    {
        list($response) = $this->retrieveProfileWithHttpInfo($waba_id, $phone_number);
        return $response;
    }

    /**
     * Operation retrieveProfileWithHttpInfo
     *
     * Retrieve a phone number profile
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     *
     * @throws \YCloud\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \YCloud\Client\Model\WhatsappPhoneNumberProfile|\YCloud\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveProfileWithHttpInfo($waba_id, $phone_number)
    {
        $request = $this->retrieveProfileRequest($waba_id, $phone_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\YCloud\Client\Model\WhatsappPhoneNumberProfile' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\YCloud\Client\Model\WhatsappPhoneNumberProfile' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\YCloud\Client\Model\WhatsappPhoneNumberProfile', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\YCloud\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\YCloud\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\YCloud\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\YCloud\Client\Model\WhatsappPhoneNumberProfile';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\YCloud\Client\Model\WhatsappPhoneNumberProfile',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\YCloud\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveProfileAsync
     *
     * Retrieve a phone number profile
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveProfileAsync($waba_id, $phone_number)
    {
        return $this->retrieveProfileAsyncWithHttpInfo($waba_id, $phone_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveProfileAsyncWithHttpInfo
     *
     * Retrieve a phone number profile
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveProfileAsyncWithHttpInfo($waba_id, $phone_number)
    {
        $returnType = '\YCloud\Client\Model\WhatsappPhoneNumberProfile';
        $request = $this->retrieveProfileRequest($waba_id, $phone_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveProfile'
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retrieveProfileRequest($waba_id, $phone_number)
    {
        // verify the required parameter 'waba_id' is set
        if ($waba_id === null || (is_array($waba_id) && count($waba_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $waba_id when calling retrieveProfile'
            );
        }
        // verify the required parameter 'phone_number' is set
        if ($phone_number === null || (is_array($phone_number) && count($phone_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phone_number when calling retrieveProfile'
            );
        }

        $resourcePath = '/whatsapp/phoneNumbers/{wabaId}/{phoneNumber}/profile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($waba_id !== null) {
            $resourcePath = str_replace(
                '{' . 'wabaId' . '}',
                ObjectSerializer::toPathValue($waba_id),
                $resourcePath
            );
        }
        // path params
        if ($phone_number !== null) {
            $resourcePath = str_replace(
                '{' . 'phoneNumber' . '}',
                ObjectSerializer::toPathValue($phone_number),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveSettings
     *
     * Retrieve phone number settings
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     *
     * @throws \YCloud\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \YCloud\Client\Model\WhatsappPhoneNumberSettings|\YCloud\Client\Model\ErrorResponse
     */
    public function retrieveSettings($waba_id, $phone_number)
    {
        list($response) = $this->retrieveSettingsWithHttpInfo($waba_id, $phone_number);
        return $response;
    }

    /**
     * Operation retrieveSettingsWithHttpInfo
     *
     * Retrieve phone number settings
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     *
     * @throws \YCloud\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \YCloud\Client\Model\WhatsappPhoneNumberSettings|\YCloud\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveSettingsWithHttpInfo($waba_id, $phone_number)
    {
        $request = $this->retrieveSettingsRequest($waba_id, $phone_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\YCloud\Client\Model\WhatsappPhoneNumberSettings' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\YCloud\Client\Model\WhatsappPhoneNumberSettings' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\YCloud\Client\Model\WhatsappPhoneNumberSettings', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\YCloud\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\YCloud\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\YCloud\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\YCloud\Client\Model\WhatsappPhoneNumberSettings';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\YCloud\Client\Model\WhatsappPhoneNumberSettings',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\YCloud\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveSettingsAsync
     *
     * Retrieve phone number settings
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveSettingsAsync($waba_id, $phone_number)
    {
        return $this->retrieveSettingsAsyncWithHttpInfo($waba_id, $phone_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveSettingsAsyncWithHttpInfo
     *
     * Retrieve phone number settings
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveSettingsAsyncWithHttpInfo($waba_id, $phone_number)
    {
        $returnType = '\YCloud\Client\Model\WhatsappPhoneNumberSettings';
        $request = $this->retrieveSettingsRequest($waba_id, $phone_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveSettings'
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retrieveSettingsRequest($waba_id, $phone_number)
    {
        // verify the required parameter 'waba_id' is set
        if ($waba_id === null || (is_array($waba_id) && count($waba_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $waba_id when calling retrieveSettings'
            );
        }
        // verify the required parameter 'phone_number' is set
        if ($phone_number === null || (is_array($phone_number) && count($phone_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phone_number when calling retrieveSettings'
            );
        }

        $resourcePath = '/whatsapp/phoneNumbers/{wabaId}/{phoneNumber}/settings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($waba_id !== null) {
            $resourcePath = str_replace(
                '{' . 'wabaId' . '}',
                ObjectSerializer::toPathValue($waba_id),
                $resourcePath
            );
        }
        // path params
        if ($phone_number !== null) {
            $resourcePath = str_replace(
                '{' . 'phoneNumber' . '}',
                ObjectSerializer::toPathValue($phone_number),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation saveSettings
     *
     * Save phone number settings
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     * @param  \YCloud\Client\Model\WhatsappPhoneNumberSettings $whatsapp_phone_number_settings Phone number settings to save. (required)
     *
     * @throws \YCloud\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \YCloud\Client\Model\WhatsappPhoneNumberSettings|\YCloud\Client\Model\ErrorResponse
     */
    public function saveSettings($waba_id, $phone_number, $whatsapp_phone_number_settings)
    {
        list($response) = $this->saveSettingsWithHttpInfo($waba_id, $phone_number, $whatsapp_phone_number_settings);
        return $response;
    }

    /**
     * Operation saveSettingsWithHttpInfo
     *
     * Save phone number settings
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     * @param  \YCloud\Client\Model\WhatsappPhoneNumberSettings $whatsapp_phone_number_settings Phone number settings to save. (required)
     *
     * @throws \YCloud\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \YCloud\Client\Model\WhatsappPhoneNumberSettings|\YCloud\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function saveSettingsWithHttpInfo($waba_id, $phone_number, $whatsapp_phone_number_settings)
    {
        $request = $this->saveSettingsRequest($waba_id, $phone_number, $whatsapp_phone_number_settings);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\YCloud\Client\Model\WhatsappPhoneNumberSettings' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\YCloud\Client\Model\WhatsappPhoneNumberSettings' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\YCloud\Client\Model\WhatsappPhoneNumberSettings', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\YCloud\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\YCloud\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\YCloud\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\YCloud\Client\Model\WhatsappPhoneNumberSettings';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\YCloud\Client\Model\WhatsappPhoneNumberSettings',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\YCloud\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation saveSettingsAsync
     *
     * Save phone number settings
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     * @param  \YCloud\Client\Model\WhatsappPhoneNumberSettings $whatsapp_phone_number_settings Phone number settings to save. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saveSettingsAsync($waba_id, $phone_number, $whatsapp_phone_number_settings)
    {
        return $this->saveSettingsAsyncWithHttpInfo($waba_id, $phone_number, $whatsapp_phone_number_settings)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation saveSettingsAsyncWithHttpInfo
     *
     * Save phone number settings
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     * @param  \YCloud\Client\Model\WhatsappPhoneNumberSettings $whatsapp_phone_number_settings Phone number settings to save. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saveSettingsAsyncWithHttpInfo($waba_id, $phone_number, $whatsapp_phone_number_settings)
    {
        $returnType = '\YCloud\Client\Model\WhatsappPhoneNumberSettings';
        $request = $this->saveSettingsRequest($waba_id, $phone_number, $whatsapp_phone_number_settings);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'saveSettings'
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     * @param  \YCloud\Client\Model\WhatsappPhoneNumberSettings $whatsapp_phone_number_settings Phone number settings to save. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function saveSettingsRequest($waba_id, $phone_number, $whatsapp_phone_number_settings)
    {
        // verify the required parameter 'waba_id' is set
        if ($waba_id === null || (is_array($waba_id) && count($waba_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $waba_id when calling saveSettings'
            );
        }
        // verify the required parameter 'phone_number' is set
        if ($phone_number === null || (is_array($phone_number) && count($phone_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phone_number when calling saveSettings'
            );
        }
        // verify the required parameter 'whatsapp_phone_number_settings' is set
        if ($whatsapp_phone_number_settings === null || (is_array($whatsapp_phone_number_settings) && count($whatsapp_phone_number_settings) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $whatsapp_phone_number_settings when calling saveSettings'
            );
        }

        $resourcePath = '/whatsapp/phoneNumbers/{wabaId}/{phoneNumber}/settings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($waba_id !== null) {
            $resourcePath = str_replace(
                '{' . 'wabaId' . '}',
                ObjectSerializer::toPathValue($waba_id),
                $resourcePath
            );
        }
        // path params
        if ($phone_number !== null) {
            $resourcePath = str_replace(
                '{' . 'phoneNumber' . '}',
                ObjectSerializer::toPathValue($phone_number),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($whatsapp_phone_number_settings)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($whatsapp_phone_number_settings));
            } else {
                $httpBody = $whatsapp_phone_number_settings;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCommerceSettings
     *
     * Update commerce settings
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     * @param  \YCloud\Client\Model\WhatsappCommerceSettingsUpdateRequest $whatsapp_commerce_settings_update_request whatsapp_commerce_settings_update_request (required)
     *
     * @throws \YCloud\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \YCloud\Client\Model\WhatsappCommerceSettings|\YCloud\Client\Model\ErrorResponse
     */
    public function updateCommerceSettings($waba_id, $phone_number, $whatsapp_commerce_settings_update_request)
    {
        list($response) = $this->updateCommerceSettingsWithHttpInfo($waba_id, $phone_number, $whatsapp_commerce_settings_update_request);
        return $response;
    }

    /**
     * Operation updateCommerceSettingsWithHttpInfo
     *
     * Update commerce settings
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     * @param  \YCloud\Client\Model\WhatsappCommerceSettingsUpdateRequest $whatsapp_commerce_settings_update_request (required)
     *
     * @throws \YCloud\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \YCloud\Client\Model\WhatsappCommerceSettings|\YCloud\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCommerceSettingsWithHttpInfo($waba_id, $phone_number, $whatsapp_commerce_settings_update_request)
    {
        $request = $this->updateCommerceSettingsRequest($waba_id, $phone_number, $whatsapp_commerce_settings_update_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\YCloud\Client\Model\WhatsappCommerceSettings' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\YCloud\Client\Model\WhatsappCommerceSettings' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\YCloud\Client\Model\WhatsappCommerceSettings', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\YCloud\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\YCloud\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\YCloud\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\YCloud\Client\Model\WhatsappCommerceSettings';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\YCloud\Client\Model\WhatsappCommerceSettings',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\YCloud\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCommerceSettingsAsync
     *
     * Update commerce settings
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     * @param  \YCloud\Client\Model\WhatsappCommerceSettingsUpdateRequest $whatsapp_commerce_settings_update_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCommerceSettingsAsync($waba_id, $phone_number, $whatsapp_commerce_settings_update_request)
    {
        return $this->updateCommerceSettingsAsyncWithHttpInfo($waba_id, $phone_number, $whatsapp_commerce_settings_update_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCommerceSettingsAsyncWithHttpInfo
     *
     * Update commerce settings
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     * @param  \YCloud\Client\Model\WhatsappCommerceSettingsUpdateRequest $whatsapp_commerce_settings_update_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCommerceSettingsAsyncWithHttpInfo($waba_id, $phone_number, $whatsapp_commerce_settings_update_request)
    {
        $returnType = '\YCloud\Client\Model\WhatsappCommerceSettings';
        $request = $this->updateCommerceSettingsRequest($waba_id, $phone_number, $whatsapp_commerce_settings_update_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCommerceSettings'
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     * @param  \YCloud\Client\Model\WhatsappCommerceSettingsUpdateRequest $whatsapp_commerce_settings_update_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCommerceSettingsRequest($waba_id, $phone_number, $whatsapp_commerce_settings_update_request)
    {
        // verify the required parameter 'waba_id' is set
        if ($waba_id === null || (is_array($waba_id) && count($waba_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $waba_id when calling updateCommerceSettings'
            );
        }
        // verify the required parameter 'phone_number' is set
        if ($phone_number === null || (is_array($phone_number) && count($phone_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phone_number when calling updateCommerceSettings'
            );
        }
        // verify the required parameter 'whatsapp_commerce_settings_update_request' is set
        if ($whatsapp_commerce_settings_update_request === null || (is_array($whatsapp_commerce_settings_update_request) && count($whatsapp_commerce_settings_update_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $whatsapp_commerce_settings_update_request when calling updateCommerceSettings'
            );
        }

        $resourcePath = '/whatsapp/phoneNumbers/{wabaId}/{phoneNumber}/whatsappCommerceSettings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($waba_id !== null) {
            $resourcePath = str_replace(
                '{' . 'wabaId' . '}',
                ObjectSerializer::toPathValue($waba_id),
                $resourcePath
            );
        }
        // path params
        if ($phone_number !== null) {
            $resourcePath = str_replace(
                '{' . 'phoneNumber' . '}',
                ObjectSerializer::toPathValue($phone_number),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($whatsapp_commerce_settings_update_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($whatsapp_commerce_settings_update_request));
            } else {
                $httpBody = $whatsapp_commerce_settings_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateDisplayName
     *
     * Update a phone number display name
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     * @param  \YCloud\Client\Model\WhatsappPhoneNameUpdateRequest $whatsapp_phone_name_update_request whatsapp_phone_name_update_request (required)
     *
     * @throws \YCloud\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \YCloud\Client\Model\WhatsappPhoneNameUpdateResponse|\YCloud\Client\Model\ErrorResponse
     */
    public function updateDisplayName($waba_id, $phone_number, $whatsapp_phone_name_update_request)
    {
        list($response) = $this->updateDisplayNameWithHttpInfo($waba_id, $phone_number, $whatsapp_phone_name_update_request);
        return $response;
    }

    /**
     * Operation updateDisplayNameWithHttpInfo
     *
     * Update a phone number display name
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     * @param  \YCloud\Client\Model\WhatsappPhoneNameUpdateRequest $whatsapp_phone_name_update_request (required)
     *
     * @throws \YCloud\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \YCloud\Client\Model\WhatsappPhoneNameUpdateResponse|\YCloud\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDisplayNameWithHttpInfo($waba_id, $phone_number, $whatsapp_phone_name_update_request)
    {
        $request = $this->updateDisplayNameRequest($waba_id, $phone_number, $whatsapp_phone_name_update_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\YCloud\Client\Model\WhatsappPhoneNameUpdateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\YCloud\Client\Model\WhatsappPhoneNameUpdateResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\YCloud\Client\Model\WhatsappPhoneNameUpdateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\YCloud\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\YCloud\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\YCloud\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\YCloud\Client\Model\WhatsappPhoneNameUpdateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\YCloud\Client\Model\WhatsappPhoneNameUpdateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\YCloud\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateDisplayNameAsync
     *
     * Update a phone number display name
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     * @param  \YCloud\Client\Model\WhatsappPhoneNameUpdateRequest $whatsapp_phone_name_update_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDisplayNameAsync($waba_id, $phone_number, $whatsapp_phone_name_update_request)
    {
        return $this->updateDisplayNameAsyncWithHttpInfo($waba_id, $phone_number, $whatsapp_phone_name_update_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateDisplayNameAsyncWithHttpInfo
     *
     * Update a phone number display name
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     * @param  \YCloud\Client\Model\WhatsappPhoneNameUpdateRequest $whatsapp_phone_name_update_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDisplayNameAsyncWithHttpInfo($waba_id, $phone_number, $whatsapp_phone_name_update_request)
    {
        $returnType = '\YCloud\Client\Model\WhatsappPhoneNameUpdateResponse';
        $request = $this->updateDisplayNameRequest($waba_id, $phone_number, $whatsapp_phone_name_update_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDisplayName'
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     * @param  \YCloud\Client\Model\WhatsappPhoneNameUpdateRequest $whatsapp_phone_name_update_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateDisplayNameRequest($waba_id, $phone_number, $whatsapp_phone_name_update_request)
    {
        // verify the required parameter 'waba_id' is set
        if ($waba_id === null || (is_array($waba_id) && count($waba_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $waba_id when calling updateDisplayName'
            );
        }
        // verify the required parameter 'phone_number' is set
        if ($phone_number === null || (is_array($phone_number) && count($phone_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phone_number when calling updateDisplayName'
            );
        }
        // verify the required parameter 'whatsapp_phone_name_update_request' is set
        if ($whatsapp_phone_name_update_request === null || (is_array($whatsapp_phone_name_update_request) && count($whatsapp_phone_name_update_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $whatsapp_phone_name_update_request when calling updateDisplayName'
            );
        }

        $resourcePath = '/whatsapp/phoneNumbers/{wabaId}/{phoneNumber}/displayName';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($waba_id !== null) {
            $resourcePath = str_replace(
                '{' . 'wabaId' . '}',
                ObjectSerializer::toPathValue($waba_id),
                $resourcePath
            );
        }
        // path params
        if ($phone_number !== null) {
            $resourcePath = str_replace(
                '{' . 'phoneNumber' . '}',
                ObjectSerializer::toPathValue($phone_number),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($whatsapp_phone_name_update_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($whatsapp_phone_name_update_request));
            } else {
                $httpBody = $whatsapp_phone_name_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateProfile
     *
     * Update a phone number profile
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     * @param  \YCloud\Client\Model\WhatsappPhoneNumberProfileUpdateRequest $whatsapp_phone_number_profile_update_request whatsapp_phone_number_profile_update_request (required)
     *
     * @throws \YCloud\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \YCloud\Client\Model\WhatsappPhoneNumberProfile|\YCloud\Client\Model\ErrorResponse
     */
    public function updateProfile($waba_id, $phone_number, $whatsapp_phone_number_profile_update_request)
    {
        list($response) = $this->updateProfileWithHttpInfo($waba_id, $phone_number, $whatsapp_phone_number_profile_update_request);
        return $response;
    }

    /**
     * Operation updateProfileWithHttpInfo
     *
     * Update a phone number profile
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     * @param  \YCloud\Client\Model\WhatsappPhoneNumberProfileUpdateRequest $whatsapp_phone_number_profile_update_request (required)
     *
     * @throws \YCloud\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \YCloud\Client\Model\WhatsappPhoneNumberProfile|\YCloud\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProfileWithHttpInfo($waba_id, $phone_number, $whatsapp_phone_number_profile_update_request)
    {
        $request = $this->updateProfileRequest($waba_id, $phone_number, $whatsapp_phone_number_profile_update_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\YCloud\Client\Model\WhatsappPhoneNumberProfile' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\YCloud\Client\Model\WhatsappPhoneNumberProfile' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\YCloud\Client\Model\WhatsappPhoneNumberProfile', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\YCloud\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\YCloud\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\YCloud\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\YCloud\Client\Model\WhatsappPhoneNumberProfile';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\YCloud\Client\Model\WhatsappPhoneNumberProfile',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\YCloud\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateProfileAsync
     *
     * Update a phone number profile
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     * @param  \YCloud\Client\Model\WhatsappPhoneNumberProfileUpdateRequest $whatsapp_phone_number_profile_update_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProfileAsync($waba_id, $phone_number, $whatsapp_phone_number_profile_update_request)
    {
        return $this->updateProfileAsyncWithHttpInfo($waba_id, $phone_number, $whatsapp_phone_number_profile_update_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateProfileAsyncWithHttpInfo
     *
     * Update a phone number profile
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     * @param  \YCloud\Client\Model\WhatsappPhoneNumberProfileUpdateRequest $whatsapp_phone_number_profile_update_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProfileAsyncWithHttpInfo($waba_id, $phone_number, $whatsapp_phone_number_profile_update_request)
    {
        $returnType = '\YCloud\Client\Model\WhatsappPhoneNumberProfile';
        $request = $this->updateProfileRequest($waba_id, $phone_number, $whatsapp_phone_number_profile_update_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateProfile'
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     * @param  \YCloud\Client\Model\WhatsappPhoneNumberProfileUpdateRequest $whatsapp_phone_number_profile_update_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateProfileRequest($waba_id, $phone_number, $whatsapp_phone_number_profile_update_request)
    {
        // verify the required parameter 'waba_id' is set
        if ($waba_id === null || (is_array($waba_id) && count($waba_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $waba_id when calling updateProfile'
            );
        }
        // verify the required parameter 'phone_number' is set
        if ($phone_number === null || (is_array($phone_number) && count($phone_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phone_number when calling updateProfile'
            );
        }
        // verify the required parameter 'whatsapp_phone_number_profile_update_request' is set
        if ($whatsapp_phone_number_profile_update_request === null || (is_array($whatsapp_phone_number_profile_update_request) && count($whatsapp_phone_number_profile_update_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $whatsapp_phone_number_profile_update_request when calling updateProfile'
            );
        }

        $resourcePath = '/whatsapp/phoneNumbers/{wabaId}/{phoneNumber}/profile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($waba_id !== null) {
            $resourcePath = str_replace(
                '{' . 'wabaId' . '}',
                ObjectSerializer::toPathValue($waba_id),
                $resourcePath
            );
        }
        // path params
        if ($phone_number !== null) {
            $resourcePath = str_replace(
                '{' . 'phoneNumber' . '}',
                ObjectSerializer::toPathValue($phone_number),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($whatsapp_phone_number_profile_update_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($whatsapp_phone_number_profile_update_request));
            } else {
                $httpBody = $whatsapp_phone_number_profile_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
