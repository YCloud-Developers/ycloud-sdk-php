<?php
/**
 * WhatsappInboundMessageInteractiveCallPermissionReply
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  YCloud\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * YCloud API
 *
 * The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.
 *
 * The version of the OpenAPI document: v2
 * Contact: service@ycloud.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace YCloud\Client\Model;

use \ArrayAccess;
use \YCloud\Client\ObjectSerializer;

/**
 * WhatsappInboundMessageInteractiveCallPermissionReply Class Doc Comment
 *
 * @category Class
 * @description Sent when a customer responds to a call permission request. Returned when &#x60;type&#x60; is &#x60;call_permission_reply&#x60;. This occurs when WhatsApp prompts users to grant callback permissions after they call your business.
 * @package  YCloud\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WhatsappInboundMessageInteractiveCallPermissionReply implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WhatsappInboundMessageInteractive_call_permission_reply';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'response' => 'string',
        'expiration_timestamp' => 'int',
        'is_permanent' => 'bool',
        'response_source' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'response' => null,
        'expiration_timestamp' => 'int64',
        'is_permanent' => null,
        'response_source' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'response' => 'response',
        'expiration_timestamp' => 'expiration_timestamp',
        'is_permanent' => 'is_permanent',
        'response_source' => 'response_source'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'response' => 'setResponse',
        'expiration_timestamp' => 'setExpirationTimestamp',
        'is_permanent' => 'setIsPermanent',
        'response_source' => 'setResponseSource'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'response' => 'getResponse',
        'expiration_timestamp' => 'getExpirationTimestamp',
        'is_permanent' => 'getIsPermanent',
        'response_source' => 'getResponseSource'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const RESPONSE_ACCEPT = 'accept';
    public const RESPONSE_REJECT = 'reject';
    public const RESPONSE_SOURCE_USER_ACTION = 'user_action';
    public const RESPONSE_SOURCE_AUTOMATIC = 'automatic';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResponseAllowableValues()
    {
        return [
            self::RESPONSE_ACCEPT,
            self::RESPONSE_REJECT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResponseSourceAllowableValues()
    {
        return [
            self::RESPONSE_SOURCE_USER_ACTION,
            self::RESPONSE_SOURCE_AUTOMATIC,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['response'] = $data['response'] ?? null;
        $this->container['expiration_timestamp'] = $data['expiration_timestamp'] ?? null;
        $this->container['is_permanent'] = $data['is_permanent'] ?? null;
        $this->container['response_source'] = $data['response_source'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getResponseAllowableValues();
        if (!is_null($this->container['response']) && !in_array($this->container['response'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'response', must be one of '%s'",
                $this->container['response'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getResponseSourceAllowableValues();
        if (!is_null($this->container['response_source']) && !in_array($this->container['response_source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'response_source', must be one of '%s'",
                $this->container['response_source'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets response
     *
     * @return string|null
     */
    public function getResponse()
    {
        return $this->container['response'];
    }

    /**
     * Sets response
     *
     * @param string|null $response The customer's response to the call permission request. - `accept`: User granted permission for business to call back - `reject`: User rejected permission for business to call back
     *
     * @return self
     */
    public function setResponse($response)
    {
        $allowedValues = $this->getResponseAllowableValues();
        if (!is_null($response) && !in_array($response, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'response', must be one of '%s'",
                    $response,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['response'] = $response;

        return $this;
    }

    /**
     * Gets expiration_timestamp
     *
     * @return int|null
     */
    public function getExpirationTimestamp()
    {
        return $this->container['expiration_timestamp'];
    }

    /**
     * Sets expiration_timestamp
     *
     * @param int|null $expiration_timestamp The timestamp (in seconds) when the call permission expires. Only present when response is \"accept\" and is_permanent is false.
     *
     * @return self
     */
    public function setExpirationTimestamp($expiration_timestamp)
    {
        $this->container['expiration_timestamp'] = $expiration_timestamp;

        return $this;
    }

    /**
     * Gets is_permanent
     *
     * @return bool|null
     */
    public function getIsPermanent()
    {
        return $this->container['is_permanent'];
    }

    /**
     * Sets is_permanent
     *
     * @param bool|null $is_permanent Whether the permission is permanent or temporary. - `true`: Permanent authorization (no expiration) - `false`: Temporary authorization (expires at expiration_timestamp)
     *
     * @return self
     */
    public function setIsPermanent($is_permanent)
    {
        $this->container['is_permanent'] = $is_permanent;

        return $this;
    }

    /**
     * Gets response_source
     *
     * @return string|null
     */
    public function getResponseSource()
    {
        return $this->container['response_source'];
    }

    /**
     * Sets response_source
     *
     * @param string|null $response_source The source of this permission response. - `user_action`: User explicitly approved or rejected the permission - `automatic`: Automatic permission approval due to the WhatsApp user initiating the call
     *
     * @return self
     */
    public function setResponseSource($response_source)
    {
        $allowedValues = $this->getResponseSourceAllowableValues();
        if (!is_null($response_source) && !in_array($response_source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'response_source', must be one of '%s'",
                    $response_source,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['response_source'] = $response_source;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


