<?php
/**
 * WhatsappPhoneNumber
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  YCloud\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * YCloud API
 *
 * The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.
 *
 * The version of the OpenAPI document: v2
 * Contact: service@ycloud.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace YCloud\Client\Model;

use \ArrayAccess;
use \YCloud\Client\ObjectSerializer;

/**
 * WhatsappPhoneNumber Class Doc Comment
 *
 * @category Class
 * @description See [WhatsApp Business Phone Number](https://developers.facebook.com/docs/whatsapp/cloud-api/phone-numbers)
 * @package  YCloud\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WhatsappPhoneNumber implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WhatsappPhoneNumber';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'phone_number' => 'string',
        'display_phone_number' => 'string',
        'waba_id' => 'string',
        'quality_rating' => '\YCloud\Client\Model\WhatsappPhoneNumberQualityRating',
        'messaging_limit' => 'string',
        'whatsapp_business_manager_messaging_limit' => 'string',
        'verified_name' => 'string',
        'new_name' => 'string',
        'code_verification_status' => '\YCloud\Client\Model\WhatsappPhoneNumberCodeVerificationStatus',
        'is_official_business_account' => 'bool',
        'status' => '\YCloud\Client\Model\WhatsappPhoneNumberStatus',
        'name_status' => '\YCloud\Client\Model\WhatsappPhoneNumberNameStatus',
        'new_name_status' => '\YCloud\Client\Model\WhatsappPhoneNumberNameStatus',
        'decision' => '\YCloud\Client\Model\WhatsappReviewDecision',
        'requested_verified_name' => 'string',
        'rejection_reason' => 'string',
        'quality_update_event' => '\YCloud\Client\Model\WhatsappPhoneNumberQualityUpdateEventEnum'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'phone_number' => null,
        'display_phone_number' => null,
        'waba_id' => null,
        'quality_rating' => null,
        'messaging_limit' => null,
        'whatsapp_business_manager_messaging_limit' => null,
        'verified_name' => null,
        'new_name' => null,
        'code_verification_status' => null,
        'is_official_business_account' => null,
        'status' => null,
        'name_status' => null,
        'new_name_status' => null,
        'decision' => null,
        'requested_verified_name' => null,
        'rejection_reason' => null,
        'quality_update_event' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'phone_number' => 'phoneNumber',
        'display_phone_number' => 'displayPhoneNumber',
        'waba_id' => 'wabaId',
        'quality_rating' => 'qualityRating',
        'messaging_limit' => 'messagingLimit',
        'whatsapp_business_manager_messaging_limit' => 'whatsappBusinessManagerMessagingLimit',
        'verified_name' => 'verifiedName',
        'new_name' => 'newName',
        'code_verification_status' => 'codeVerificationStatus',
        'is_official_business_account' => 'isOfficialBusinessAccount',
        'status' => 'status',
        'name_status' => 'nameStatus',
        'new_name_status' => 'newNameStatus',
        'decision' => 'decision',
        'requested_verified_name' => 'requestedVerifiedName',
        'rejection_reason' => 'rejectionReason',
        'quality_update_event' => 'qualityUpdateEvent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'phone_number' => 'setPhoneNumber',
        'display_phone_number' => 'setDisplayPhoneNumber',
        'waba_id' => 'setWabaId',
        'quality_rating' => 'setQualityRating',
        'messaging_limit' => 'setMessagingLimit',
        'whatsapp_business_manager_messaging_limit' => 'setWhatsappBusinessManagerMessagingLimit',
        'verified_name' => 'setVerifiedName',
        'new_name' => 'setNewName',
        'code_verification_status' => 'setCodeVerificationStatus',
        'is_official_business_account' => 'setIsOfficialBusinessAccount',
        'status' => 'setStatus',
        'name_status' => 'setNameStatus',
        'new_name_status' => 'setNewNameStatus',
        'decision' => 'setDecision',
        'requested_verified_name' => 'setRequestedVerifiedName',
        'rejection_reason' => 'setRejectionReason',
        'quality_update_event' => 'setQualityUpdateEvent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'phone_number' => 'getPhoneNumber',
        'display_phone_number' => 'getDisplayPhoneNumber',
        'waba_id' => 'getWabaId',
        'quality_rating' => 'getQualityRating',
        'messaging_limit' => 'getMessagingLimit',
        'whatsapp_business_manager_messaging_limit' => 'getWhatsappBusinessManagerMessagingLimit',
        'verified_name' => 'getVerifiedName',
        'new_name' => 'getNewName',
        'code_verification_status' => 'getCodeVerificationStatus',
        'is_official_business_account' => 'getIsOfficialBusinessAccount',
        'status' => 'getStatus',
        'name_status' => 'getNameStatus',
        'new_name_status' => 'getNewNameStatus',
        'decision' => 'getDecision',
        'requested_verified_name' => 'getRequestedVerifiedName',
        'rejection_reason' => 'getRejectionReason',
        'quality_update_event' => 'getQualityUpdateEvent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['phone_number'] = $data['phone_number'] ?? null;
        $this->container['display_phone_number'] = $data['display_phone_number'] ?? null;
        $this->container['waba_id'] = $data['waba_id'] ?? null;
        $this->container['quality_rating'] = $data['quality_rating'] ?? null;
        $this->container['messaging_limit'] = $data['messaging_limit'] ?? null;
        $this->container['whatsapp_business_manager_messaging_limit'] = $data['whatsapp_business_manager_messaging_limit'] ?? null;
        $this->container['verified_name'] = $data['verified_name'] ?? null;
        $this->container['new_name'] = $data['new_name'] ?? null;
        $this->container['code_verification_status'] = $data['code_verification_status'] ?? null;
        $this->container['is_official_business_account'] = $data['is_official_business_account'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['name_status'] = $data['name_status'] ?? null;
        $this->container['new_name_status'] = $data['new_name_status'] ?? null;
        $this->container['decision'] = $data['decision'] ?? null;
        $this->container['requested_verified_name'] = $data['requested_verified_name'] ?? null;
        $this->container['rejection_reason'] = $data['rejection_reason'] ?? null;
        $this->container['quality_update_event'] = $data['quality_update_event'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Phone number ID.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format.
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets display_phone_number
     *
     * @return string|null
     */
    public function getDisplayPhoneNumber()
    {
        return $this->container['display_phone_number'];
    }

    /**
     * Sets display_phone_number
     *
     * @param string|null $display_phone_number Display phone number.
     *
     * @return self
     */
    public function setDisplayPhoneNumber($display_phone_number)
    {
        $this->container['display_phone_number'] = $display_phone_number;

        return $this;
    }

    /**
     * Gets waba_id
     *
     * @return string|null
     */
    public function getWabaId()
    {
        return $this->container['waba_id'];
    }

    /**
     * Sets waba_id
     *
     * @param string|null $waba_id WhatsApp Business Account ID.
     *
     * @return self
     */
    public function setWabaId($waba_id)
    {
        $this->container['waba_id'] = $waba_id;

        return $this;
    }

    /**
     * Gets quality_rating
     *
     * @return \YCloud\Client\Model\WhatsappPhoneNumberQualityRating|null
     */
    public function getQualityRating()
    {
        return $this->container['quality_rating'];
    }

    /**
     * Sets quality_rating
     *
     * @param \YCloud\Client\Model\WhatsappPhoneNumberQualityRating|null $quality_rating quality_rating
     *
     * @return self
     */
    public function setQualityRating($quality_rating)
    {
        $this->container['quality_rating'] = $quality_rating;

        return $this;
    }

    /**
     * Gets messaging_limit
     *
     * @return string|null
     */
    public function getMessagingLimit()
    {
        return $this->container['messaging_limit'];
    }

    /**
     * Sets messaging_limit
     *
     * @param string|null $messaging_limit Messaging limits determine the maximum number of business-initiated conversations each phone number can start in a rolling 24-hour period. See also [Messaging Limits](https://developers.facebook.com/docs/whatsapp/messaging-limits). - `TIER_NOT_SET`: Unknown limit. - `TIER_50`: 50 business-initiated conversations in a rolling 24-hour period. - `TIER_250`: 250 business-initiated conversations in a rolling 24-hour period. - `TIER_1K`: 1K business-initiated conversations with unique customers in a rolling 24-hour period. - `TIER_10K`: 10K business-initiated conversations with unique customers in a rolling 24-hour period. - `TIER_100K`: 100K business-initiated conversations with unique customers in a rolling 24-hour period. - `TIER_UNLIMITED`: An unlimited number of business-initiated conversations in a rolling 24-hour period.
     *
     * @return self
     */
    public function setMessagingLimit($messaging_limit)
    {
        $this->container['messaging_limit'] = $messaging_limit;

        return $this;
    }

    /**
     * Gets whatsapp_business_manager_messaging_limit
     *
     * @return string|null
     */
    public function getWhatsappBusinessManagerMessagingLimit()
    {
        return $this->container['whatsapp_business_manager_messaging_limit'];
    }

    /**
     * Sets whatsapp_business_manager_messaging_limit
     *
     * @param string|null $whatsapp_business_manager_messaging_limit The owning business portfolio's messaging limit. Starting October 7, 2025, messaging limits will instead be calculated and set on a business portfolio basis, and will be shared by all business phone numbers within each portfolio. See also [phone_number_quality_update webhook reference](https://developers.facebook.com/docs/whatsapp/cloud-api/webhooks/reference/phone_number_quality_update). - `TIER_NOT_SET`: The business phone number has not been used to send a message yet. - `TIER_50`: Messaging limit of 50 business-initiated conversations in a rolling 24-hour period. - `TIER_250`: Messaging limit of 250 business-initiated conversations in a rolling 24-hour period. - `TIER_2K`: Messaging limit of 2,000 business-initiated conversations in a rolling 24-hour period. - `TIER_10K`: Messaging limit of 10,000 business-initiated conversations in a rolling 24-hour period. - `TIER_100K`: Messaging limit of 100,000 business-initiated conversations in a rolling 24-hour period. - `TIER_UNLIMITED`: The business phone number has higher throughput with unlimited business-initiated conversations.
     *
     * @return self
     */
    public function setWhatsappBusinessManagerMessagingLimit($whatsapp_business_manager_messaging_limit)
    {
        $this->container['whatsapp_business_manager_messaging_limit'] = $whatsapp_business_manager_messaging_limit;

        return $this;
    }

    /**
     * Gets verified_name
     *
     * @return string|null
     */
    public function getVerifiedName()
    {
        return $this->container['verified_name'];
    }

    /**
     * Sets verified_name
     *
     * @param string|null $verified_name Verified name.
     *
     * @return self
     */
    public function setVerifiedName($verified_name)
    {
        $this->container['verified_name'] = $verified_name;

        return $this;
    }

    /**
     * Gets new_name
     *
     * @return string|null
     */
    public function getNewName()
    {
        return $this->container['new_name'];
    }

    /**
     * Sets new_name
     *
     * @param string|null $new_name The modified name
     *
     * @return self
     */
    public function setNewName($new_name)
    {
        $this->container['new_name'] = $new_name;

        return $this;
    }

    /**
     * Gets code_verification_status
     *
     * @return \YCloud\Client\Model\WhatsappPhoneNumberCodeVerificationStatus|null
     */
    public function getCodeVerificationStatus()
    {
        return $this->container['code_verification_status'];
    }

    /**
     * Sets code_verification_status
     *
     * @param \YCloud\Client\Model\WhatsappPhoneNumberCodeVerificationStatus|null $code_verification_status code_verification_status
     *
     * @return self
     */
    public function setCodeVerificationStatus($code_verification_status)
    {
        $this->container['code_verification_status'] = $code_verification_status;

        return $this;
    }

    /**
     * Gets is_official_business_account
     *
     * @return bool|null
     */
    public function getIsOfficialBusinessAccount()
    {
        return $this->container['is_official_business_account'];
    }

    /**
     * Sets is_official_business_account
     *
     * @param bool|null $is_official_business_account Whether this phone number is an official business account or not. An official business account has a green checkmark badge in its profile and chat thread headers. See [Official Business Account](https://developers.facebook.com/docs/whatsapp/overview/business-accounts#official-business-account) for more information.
     *
     * @return self
     */
    public function setIsOfficialBusinessAccount($is_official_business_account)
    {
        $this->container['is_official_business_account'] = $is_official_business_account;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \YCloud\Client\Model\WhatsappPhoneNumberStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \YCloud\Client\Model\WhatsappPhoneNumberStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets name_status
     *
     * @return \YCloud\Client\Model\WhatsappPhoneNumberNameStatus|null
     */
    public function getNameStatus()
    {
        return $this->container['name_status'];
    }

    /**
     * Sets name_status
     *
     * @param \YCloud\Client\Model\WhatsappPhoneNumberNameStatus|null $name_status name_status
     *
     * @return self
     */
    public function setNameStatus($name_status)
    {
        $this->container['name_status'] = $name_status;

        return $this;
    }

    /**
     * Gets new_name_status
     *
     * @return \YCloud\Client\Model\WhatsappPhoneNumberNameStatus|null
     */
    public function getNewNameStatus()
    {
        return $this->container['new_name_status'];
    }

    /**
     * Sets new_name_status
     *
     * @param \YCloud\Client\Model\WhatsappPhoneNumberNameStatus|null $new_name_status new_name_status
     *
     * @return self
     */
    public function setNewNameStatus($new_name_status)
    {
        $this->container['new_name_status'] = $new_name_status;

        return $this;
    }

    /**
     * Gets decision
     *
     * @return \YCloud\Client\Model\WhatsappReviewDecision|null
     */
    public function getDecision()
    {
        return $this->container['decision'];
    }

    /**
     * Sets decision
     *
     * @param \YCloud\Client\Model\WhatsappReviewDecision|null $decision decision
     *
     * @return self
     */
    public function setDecision($decision)
    {
        $this->container['decision'] = $decision;

        return $this;
    }

    /**
     * Gets requested_verified_name
     *
     * @return string|null
     */
    public function getRequestedVerifiedName()
    {
        return $this->container['requested_verified_name'];
    }

    /**
     * Sets requested_verified_name
     *
     * @param string|null $requested_verified_name Last requested verified name.
     *
     * @return self
     */
    public function setRequestedVerifiedName($requested_verified_name)
    {
        $this->container['requested_verified_name'] = $requested_verified_name;

        return $this;
    }

    /**
     * Gets rejection_reason
     *
     * @return string|null
     */
    public function getRejectionReason()
    {
        return $this->container['rejection_reason'];
    }

    /**
     * Sets rejection_reason
     *
     * @param string|null $rejection_reason Rejection reason.
     *
     * @return self
     */
    public function setRejectionReason($rejection_reason)
    {
        $this->container['rejection_reason'] = $rejection_reason;

        return $this;
    }

    /**
     * Gets quality_update_event
     *
     * @return \YCloud\Client\Model\WhatsappPhoneNumberQualityUpdateEventEnum|null
     */
    public function getQualityUpdateEvent()
    {
        return $this->container['quality_update_event'];
    }

    /**
     * Sets quality_update_event
     *
     * @param \YCloud\Client\Model\WhatsappPhoneNumberQualityUpdateEventEnum|null $quality_update_event quality_update_event
     *
     * @return self
     */
    public function setQualityUpdateEvent($quality_update_event)
    {
        $this->container['quality_update_event'] = $quality_update_event;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


