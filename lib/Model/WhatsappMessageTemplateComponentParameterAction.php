<?php
/**
 * WhatsappMessageTemplateComponentParameterAction
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  YCloud\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * YCloud API
 *
 * The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.
 *
 * The version of the OpenAPI document: v2
 * Contact: service@ycloud.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace YCloud\Client\Model;

use \ArrayAccess;
use \YCloud\Client\ObjectSerializer;

/**
 * WhatsappMessageTemplateComponentParameterAction Class Doc Comment
 *
 * @category Class
 * @description Required if template uses catalog or MPM (multi-product message) buttons.
 * @package  YCloud\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WhatsappMessageTemplateComponentParameterAction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WhatsappMessageTemplateComponentParameterAction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'thumbnail_product_retailer_id' => 'string',
        'sections' => '\YCloud\Client\Model\WhatsappMessageTemplateComponentParameterActionSection[]',
        'flow_token' => 'string',
        'flow_action_data' => 'array<string,object>',
        'order_details' => '\YCloud\Client\Model\WhatsappMessageOrderDetails'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'thumbnail_product_retailer_id' => null,
        'sections' => null,
        'flow_token' => null,
        'flow_action_data' => null,
        'order_details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'thumbnail_product_retailer_id' => 'thumbnail_product_retailer_id',
        'sections' => 'sections',
        'flow_token' => 'flow_token',
        'flow_action_data' => 'flow_action_data',
        'order_details' => 'order_details'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'thumbnail_product_retailer_id' => 'setThumbnailProductRetailerId',
        'sections' => 'setSections',
        'flow_token' => 'setFlowToken',
        'flow_action_data' => 'setFlowActionData',
        'order_details' => 'setOrderDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'thumbnail_product_retailer_id' => 'getThumbnailProductRetailerId',
        'sections' => 'getSections',
        'flow_token' => 'getFlowToken',
        'flow_action_data' => 'getFlowActionData',
        'order_details' => 'getOrderDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['thumbnail_product_retailer_id'] = $data['thumbnail_product_retailer_id'] ?? null;
        $this->container['sections'] = $data['sections'] ?? null;
        $this->container['flow_token'] = $data['flow_token'] ?? null;
        $this->container['flow_action_data'] = $data['flow_action_data'] ?? null;
        $this->container['order_details'] = $data['order_details'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['sections']) && (count($this->container['sections']) > 10)) {
            $invalidProperties[] = "invalid value for 'sections', number of items must be less than or equal to 10.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets thumbnail_product_retailer_id
     *
     * @return string|null
     */
    public function getThumbnailProductRetailerId()
    {
        return $this->container['thumbnail_product_retailer_id'];
    }

    /**
     * Sets thumbnail_product_retailer_id
     *
     * @param string|null $thumbnail_product_retailer_id **Optional.** Use for catalog and MPM template messages. Item SKU number. Labeled as Content ID in the Commerce Manager. The thumbnail of this item will be used as the message's header image. If the `parameters` object is omitted, the product image of the first item in your catalog will be used.
     *
     * @return self
     */
    public function setThumbnailProductRetailerId($thumbnail_product_retailer_id)
    {
        $this->container['thumbnail_product_retailer_id'] = $thumbnail_product_retailer_id;

        return $this;
    }

    /**
     * Gets sections
     *
     * @return \YCloud\Client\Model\WhatsappMessageTemplateComponentParameterActionSection[]|null
     */
    public function getSections()
    {
        return $this->container['sections'];
    }

    /**
     * Sets sections
     *
     * @param \YCloud\Client\Model\WhatsappMessageTemplateComponentParameterActionSection[]|null $sections Use for MPM templates. Product sections. You can define up to 10 sections.
     *
     * @return self
     */
    public function setSections($sections)
    {

        if (!is_null($sections) && (count($sections) > 10)) {
            throw new \InvalidArgumentException('invalid value for $sections when calling WhatsappMessageTemplateComponentParameterAction., number of items must be less than or equal to 10.');
        }
        $this->container['sections'] = $sections;

        return $this;
    }

    /**
     * Gets flow_token
     *
     * @return string|null
     */
    public function getFlowToken()
    {
        return $this->container['flow_token'];
    }

    /**
     * Sets flow_token
     *
     * @param string|null $flow_token Use for `FLOW` buttons. Flow token that is generated by the business to serve as an identifier. Defaults to `unused`.
     *
     * @return self
     */
    public function setFlowToken($flow_token)
    {
        $this->container['flow_token'] = $flow_token;

        return $this;
    }

    /**
     * Gets flow_action_data
     *
     * @return array<string,object>|null
     */
    public function getFlowActionData()
    {
        return $this->container['flow_action_data'];
    }

    /**
     * Sets flow_action_data
     *
     * @param array<string,object>|null $flow_action_data Use for `FLOW` buttons. JSON object with the data payload for the first screen.
     *
     * @return self
     */
    public function setFlowActionData($flow_action_data)
    {
        $this->container['flow_action_data'] = $flow_action_data;

        return $this;
    }

    /**
     * Gets order_details
     *
     * @return \YCloud\Client\Model\WhatsappMessageOrderDetails|null
     */
    public function getOrderDetails()
    {
        return $this->container['order_details'];
    }

    /**
     * Sets order_details
     *
     * @param \YCloud\Client\Model\WhatsappMessageOrderDetails|null $order_details order_details
     *
     * @return self
     */
    public function setOrderDetails($order_details)
    {
        $this->container['order_details'] = $order_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


