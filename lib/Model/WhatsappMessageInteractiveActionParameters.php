<?php
/**
 * WhatsappMessageInteractiveActionParameters
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  YCloud\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * YCloud API
 *
 * The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.
 *
 * The version of the OpenAPI document: v2
 * Contact: service@ycloud.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace YCloud\Client\Model;

use \ArrayAccess;
use \YCloud\Client\ObjectSerializer;

/**
 * WhatsappMessageInteractiveActionParameters Class Doc Comment
 *
 * @category Class
 * @description Action parameters. Required for Call-To-Action (CTA) buttons.
 * @package  YCloud\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WhatsappMessageInteractiveActionParameters implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WhatsappMessageInteractiveActionParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'display_text' => 'string',
        'url' => 'string',
        'thumbnail_product_retailer_id' => 'string',
        'flow_message_version' => 'string',
        'flow_token' => 'string',
        'flow_id' => 'string',
        'flow_cta' => 'string',
        'flow_action' => 'string',
        'flow_action_payload' => '\YCloud\Client\Model\WhatsappMessageInteractiveActionParametersFlowActionPayload'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'display_text' => null,
        'url' => null,
        'thumbnail_product_retailer_id' => null,
        'flow_message_version' => null,
        'flow_token' => null,
        'flow_id' => null,
        'flow_cta' => null,
        'flow_action' => null,
        'flow_action_payload' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'display_text' => 'display_text',
        'url' => 'url',
        'thumbnail_product_retailer_id' => 'thumbnail_product_retailer_id',
        'flow_message_version' => 'flow_message_version',
        'flow_token' => 'flow_token',
        'flow_id' => 'flow_id',
        'flow_cta' => 'flow_cta',
        'flow_action' => 'flow_action',
        'flow_action_payload' => 'flow_action_payload'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'display_text' => 'setDisplayText',
        'url' => 'setUrl',
        'thumbnail_product_retailer_id' => 'setThumbnailProductRetailerId',
        'flow_message_version' => 'setFlowMessageVersion',
        'flow_token' => 'setFlowToken',
        'flow_id' => 'setFlowId',
        'flow_cta' => 'setFlowCta',
        'flow_action' => 'setFlowAction',
        'flow_action_payload' => 'setFlowActionPayload'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'display_text' => 'getDisplayText',
        'url' => 'getUrl',
        'thumbnail_product_retailer_id' => 'getThumbnailProductRetailerId',
        'flow_message_version' => 'getFlowMessageVersion',
        'flow_token' => 'getFlowToken',
        'flow_id' => 'getFlowId',
        'flow_cta' => 'getFlowCta',
        'flow_action' => 'getFlowAction',
        'flow_action_payload' => 'getFlowActionPayload'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['display_text'] = $data['display_text'] ?? null;
        $this->container['url'] = $data['url'] ?? null;
        $this->container['thumbnail_product_retailer_id'] = $data['thumbnail_product_retailer_id'] ?? null;
        $this->container['flow_message_version'] = $data['flow_message_version'] ?? null;
        $this->container['flow_token'] = $data['flow_token'] ?? null;
        $this->container['flow_id'] = $data['flow_id'] ?? null;
        $this->container['flow_cta'] = $data['flow_cta'] ?? null;
        $this->container['flow_action'] = $data['flow_action'] ?? null;
        $this->container['flow_action_payload'] = $data['flow_action_payload'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['display_text']) && (mb_strlen($this->container['display_text']) > 20)) {
            $invalidProperties[] = "invalid value for 'display_text', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['flow_cta']) && (mb_strlen($this->container['flow_cta']) > 20)) {
            $invalidProperties[] = "invalid value for 'flow_cta', the character length must be smaller than or equal to 20.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets display_text
     *
     * @return string|null
     */
    public function getDisplayText()
    {
        return $this->container['display_text'];
    }

    /**
     * Sets display_text
     *
     * @param string|null $display_text Text of the CTA URL button. Maximum length: 20 bytes.
     *
     * @return self
     */
    public function setDisplayText($display_text)
    {
        if (!is_null($display_text) && (mb_strlen($display_text) > 20)) {
            throw new \InvalidArgumentException('invalid length for $display_text when calling WhatsappMessageInteractiveActionParameters., must be smaller than or equal to 20.');
        }

        $this->container['display_text'] = $display_text;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url URL of the CTA URL button.
     *
     * @return self
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets thumbnail_product_retailer_id
     *
     * @return string|null
     */
    public function getThumbnailProductRetailerId()
    {
        return $this->container['thumbnail_product_retailer_id'];
    }

    /**
     * Sets thumbnail_product_retailer_id
     *
     * @param string|null $thumbnail_product_retailer_id Item SKU number. Labeled as **Content ID** in the [Commerce Manager](https://business.facebook.com/commerce). The thumbnail of this item will be used as the message's header image.
     *
     * @return self
     */
    public function setThumbnailProductRetailerId($thumbnail_product_retailer_id)
    {
        $this->container['thumbnail_product_retailer_id'] = $thumbnail_product_retailer_id;

        return $this;
    }

    /**
     * Gets flow_message_version
     *
     * @return string|null
     */
    public function getFlowMessageVersion()
    {
        return $this->container['flow_message_version'];
    }

    /**
     * Sets flow_message_version
     *
     * @param string|null $flow_message_version Use for `flow` buttons. Value must be \"3\".
     *
     * @return self
     */
    public function setFlowMessageVersion($flow_message_version)
    {
        $this->container['flow_message_version'] = $flow_message_version;

        return $this;
    }

    /**
     * Gets flow_token
     *
     * @return string|null
     */
    public function getFlowToken()
    {
        return $this->container['flow_token'];
    }

    /**
     * Sets flow_token
     *
     * @param string|null $flow_token Use for `flow` buttons. Flow token that is generated by the business to serve as an identifier. Defaults to `unused`.
     *
     * @return self
     */
    public function setFlowToken($flow_token)
    {
        $this->container['flow_token'] = $flow_token;

        return $this;
    }

    /**
     * Gets flow_id
     *
     * @return string|null
     */
    public function getFlowId()
    {
        return $this->container['flow_id'];
    }

    /**
     * Sets flow_id
     *
     * @param string|null $flow_id Required for `flow` buttons. Unique ID of the Flow provided by WhatsApp.
     *
     * @return self
     */
    public function setFlowId($flow_id)
    {
        $this->container['flow_id'] = $flow_id;

        return $this;
    }

    /**
     * Gets flow_cta
     *
     * @return string|null
     */
    public function getFlowCta()
    {
        return $this->container['flow_cta'];
    }

    /**
     * Sets flow_cta
     *
     * @param string|null $flow_cta Required for `flow` buttons. Text on the CTA button. For example: \"Open flow!\". Maximum length: 20 characters.
     *
     * @return self
     */
    public function setFlowCta($flow_cta)
    {
        if (!is_null($flow_cta) && (mb_strlen($flow_cta) > 20)) {
            throw new \InvalidArgumentException('invalid length for $flow_cta when calling WhatsappMessageInteractiveActionParameters., must be smaller than or equal to 20.');
        }

        $this->container['flow_cta'] = $flow_cta;

        return $this;
    }

    /**
     * Gets flow_action
     *
     * @return string|null
     */
    public function getFlowAction()
    {
        return $this->container['flow_action'];
    }

    /**
     * Sets flow_action
     *
     * @param string|null $flow_action Use for `flow` buttons. Either `navigate` or `data_exchange`. Defaults to `navigate`.
     *
     * @return self
     */
    public function setFlowAction($flow_action)
    {
        $this->container['flow_action'] = $flow_action;

        return $this;
    }

    /**
     * Gets flow_action_payload
     *
     * @return \YCloud\Client\Model\WhatsappMessageInteractiveActionParametersFlowActionPayload|null
     */
    public function getFlowActionPayload()
    {
        return $this->container['flow_action_payload'];
    }

    /**
     * Sets flow_action_payload
     *
     * @param \YCloud\Client\Model\WhatsappMessageInteractiveActionParametersFlowActionPayload|null $flow_action_payload flow_action_payload
     *
     * @return self
     */
    public function setFlowActionPayload($flow_action_payload)
    {
        $this->container['flow_action_payload'] = $flow_action_payload;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


