<?php
/**
 * WhatsappTemplateComponent
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  YCloud\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * YCloud API
 *
 * The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.
 *
 * The version of the OpenAPI document: v2
 * Contact: service@ycloud.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace YCloud\Client\Model;

use \ArrayAccess;
use \YCloud\Client\ObjectSerializer;

/**
 * WhatsappTemplateComponent Class Doc Comment
 *
 * @category Class
 * @package  YCloud\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WhatsappTemplateComponent implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WhatsappTemplateComponent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'format' => 'string',
        'text' => 'string',
        'buttons' => '\YCloud\Client\Model\WhatsappTemplateComponentButton[]',
        'add_security_recommendation' => 'bool',
        'code_expiration_minutes' => 'int',
        'limited_time_offer' => '\YCloud\Client\Model\WhatsappTemplateComponentLimitedTimeOffer',
        'example' => '\YCloud\Client\Model\WhatsappTemplateComponentExample',
        'cards' => '\YCloud\Client\Model\WhatsappTemplateComponentCard[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'format' => null,
        'text' => null,
        'buttons' => null,
        'add_security_recommendation' => null,
        'code_expiration_minutes' => 'int32',
        'limited_time_offer' => null,
        'example' => null,
        'cards' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'format' => 'format',
        'text' => 'text',
        'buttons' => 'buttons',
        'add_security_recommendation' => 'add_security_recommendation',
        'code_expiration_minutes' => 'code_expiration_minutes',
        'limited_time_offer' => 'limited_time_offer',
        'example' => 'example',
        'cards' => 'cards'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'format' => 'setFormat',
        'text' => 'setText',
        'buttons' => 'setButtons',
        'add_security_recommendation' => 'setAddSecurityRecommendation',
        'code_expiration_minutes' => 'setCodeExpirationMinutes',
        'limited_time_offer' => 'setLimitedTimeOffer',
        'example' => 'setExample',
        'cards' => 'setCards'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'format' => 'getFormat',
        'text' => 'getText',
        'buttons' => 'getButtons',
        'add_security_recommendation' => 'getAddSecurityRecommendation',
        'code_expiration_minutes' => 'getCodeExpirationMinutes',
        'limited_time_offer' => 'getLimitedTimeOffer',
        'example' => 'getExample',
        'cards' => 'getCards'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_BODY = 'BODY';
    public const TYPE_HEADER = 'HEADER';
    public const TYPE_FOOTER = 'FOOTER';
    public const TYPE_BUTTONS = 'BUTTONS';
    public const TYPE_LIMITED_TIME_OFFER = 'LIMITED_TIME_OFFER';
    public const TYPE_CAROUSEL = 'CAROUSEL';
    public const FORMAT_TEXT = 'TEXT';
    public const FORMAT_IMAGE = 'IMAGE';
    public const FORMAT_VIDEO = 'VIDEO';
    public const FORMAT_DOCUMENT = 'DOCUMENT';
    public const FORMAT_LOCATION = 'LOCATION';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_BODY,
            self::TYPE_HEADER,
            self::TYPE_FOOTER,
            self::TYPE_BUTTONS,
            self::TYPE_LIMITED_TIME_OFFER,
            self::TYPE_CAROUSEL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFormatAllowableValues()
    {
        return [
            self::FORMAT_TEXT,
            self::FORMAT_IMAGE,
            self::FORMAT_VIDEO,
            self::FORMAT_DOCUMENT,
            self::FORMAT_LOCATION,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = $data['type'] ?? null;
        $this->container['format'] = $data['format'] ?? null;
        $this->container['text'] = $data['text'] ?? null;
        $this->container['buttons'] = $data['buttons'] ?? null;
        $this->container['add_security_recommendation'] = $data['add_security_recommendation'] ?? null;
        $this->container['code_expiration_minutes'] = $data['code_expiration_minutes'] ?? null;
        $this->container['limited_time_offer'] = $data['limited_time_offer'] ?? null;
        $this->container['example'] = $data['example'] ?? null;
        $this->container['cards'] = $data['cards'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFormatAllowableValues();
        if (!is_null($this->container['format']) && !in_array($this->container['format'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'format', must be one of '%s'",
                $this->container['format'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['text']) && (mb_strlen($this->container['text']) > 1024)) {
            $invalidProperties[] = "invalid value for 'text', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['buttons']) && (count($this->container['buttons']) > 10)) {
            $invalidProperties[] = "invalid value for 'buttons', number of items must be less than or equal to 10.";
        }

        if (!is_null($this->container['code_expiration_minutes']) && ($this->container['code_expiration_minutes'] > 90)) {
            $invalidProperties[] = "invalid value for 'code_expiration_minutes', must be smaller than or equal to 90.";
        }

        if (!is_null($this->container['code_expiration_minutes']) && ($this->container['code_expiration_minutes'] < 1)) {
            $invalidProperties[] = "invalid value for 'code_expiration_minutes', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cards']) && (count($this->container['cards']) > 10)) {
            $invalidProperties[] = "invalid value for 'cards', number of items must be less than or equal to 10.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type **Required.** Template component type. - `BODY`: Body components are text-only components and are required by all templates. Templates are limited to one body component. - `HEADER`: Headers are optional components that appear at the top of template messages. Headers support text, media (images, videos, documents). Templates are limited to one header component. - `FOOTER`: Footers are optional text-only components that appear immediately after the body component. Templates are limited to one footer component. - `BUTTONS`: Buttons are optional interactive components that perform specific actions when tapped. - `LIMITED_TIME_OFFER`: Use for limited-time offer templates. The delivered message can display an offer expiration details section with a heading, an optional expiration timer, and the offer code itself. - `CAROUSEL`: Carousel templates allow you to send a single text message (1), accompanied by a set of up to 10 carousel cards (2) in a horizontally scrollable view.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets format
     *
     * @return string|null
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param string|null $format **Required for type `HEADER`.**
     *
     * @return self
     */
    public function setFormat($format)
    {
        $allowedValues = $this->getFormatAllowableValues();
        if (!is_null($format) && !in_array($format, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'format', must be one of '%s'",
                    $format,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['format'] = $format;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string|null
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string|null $text For body text (type = `BODY`), maximum 1024 characters. For header text (type = `HEADER`, format = `TEXT`), maximum 60 characters. For footer text (type = `FOOTER`), maximum 60 characters. For card body text (`CAROUSEL` card component type = `BODY`), maximum 160 characters.
     *
     * @return self
     */
    public function setText($text)
    {
        if (!is_null($text) && (mb_strlen($text) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $text when calling WhatsappTemplateComponent., must be smaller than or equal to 1024.');
        }

        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets buttons
     *
     * @return \YCloud\Client\Model\WhatsappTemplateComponentButton[]|null
     */
    public function getButtons()
    {
        return $this->container['buttons'];
    }

    /**
     * Sets buttons
     *
     * @param \YCloud\Client\Model\WhatsappTemplateComponentButton[]|null $buttons **Required for type `BUTTONS`.** Buttons are optional interactive components that perform specific actions when tapped. Templates can have a mixture of up to 10 button components total, although there are limits to individual buttons of the same type as well as combination limits. If a template has more than three buttons, two buttons will appear in the delivered message and the remaining buttons will be replaced with a **See all options** button. Tapping the **See all options** button reveals the remaining buttons.
     *
     * @return self
     */
    public function setButtons($buttons)
    {

        if (!is_null($buttons) && (count($buttons) > 10)) {
            throw new \InvalidArgumentException('invalid value for $buttons when calling WhatsappTemplateComponent., number of items must be less than or equal to 10.');
        }
        $this->container['buttons'] = $buttons;

        return $this;
    }

    /**
     * Gets add_security_recommendation
     *
     * @return bool|null
     */
    public function getAddSecurityRecommendation()
    {
        return $this->container['add_security_recommendation'];
    }

    /**
     * Sets add_security_recommendation
     *
     * @param bool|null $add_security_recommendation **Optional. Only applicable in the `BODY` component of an AUTHENTICATION template.** Set to `true` if you want the template to include the string, *For your security, do not share this code.* Set to `false` to exclude the string.
     *
     * @return self
     */
    public function setAddSecurityRecommendation($add_security_recommendation)
    {
        $this->container['add_security_recommendation'] = $add_security_recommendation;

        return $this;
    }

    /**
     * Gets code_expiration_minutes
     *
     * @return int|null
     */
    public function getCodeExpirationMinutes()
    {
        return $this->container['code_expiration_minutes'];
    }

    /**
     * Sets code_expiration_minutes
     *
     * @param int|null $code_expiration_minutes **Optional. Only applicable in the `FOOTER` component of an AUTHENTICATION template.** Indicates number of minutes the password or code is valid. If omitted, the code expiration warning will not be displayed in the delivered message. Minimum 1, maximum 90.
     *
     * @return self
     */
    public function setCodeExpirationMinutes($code_expiration_minutes)
    {

        if (!is_null($code_expiration_minutes) && ($code_expiration_minutes > 90)) {
            throw new \InvalidArgumentException('invalid value for $code_expiration_minutes when calling WhatsappTemplateComponent., must be smaller than or equal to 90.');
        }
        if (!is_null($code_expiration_minutes) && ($code_expiration_minutes < 1)) {
            throw new \InvalidArgumentException('invalid value for $code_expiration_minutes when calling WhatsappTemplateComponent., must be bigger than or equal to 1.');
        }

        $this->container['code_expiration_minutes'] = $code_expiration_minutes;

        return $this;
    }

    /**
     * Gets limited_time_offer
     *
     * @return \YCloud\Client\Model\WhatsappTemplateComponentLimitedTimeOffer|null
     */
    public function getLimitedTimeOffer()
    {
        return $this->container['limited_time_offer'];
    }

    /**
     * Sets limited_time_offer
     *
     * @param \YCloud\Client\Model\WhatsappTemplateComponentLimitedTimeOffer|null $limited_time_offer limited_time_offer
     *
     * @return self
     */
    public function setLimitedTimeOffer($limited_time_offer)
    {
        $this->container['limited_time_offer'] = $limited_time_offer;

        return $this;
    }

    /**
     * Gets example
     *
     * @return \YCloud\Client\Model\WhatsappTemplateComponentExample|null
     */
    public function getExample()
    {
        return $this->container['example'];
    }

    /**
     * Sets example
     *
     * @param \YCloud\Client\Model\WhatsappTemplateComponentExample|null $example example
     *
     * @return self
     */
    public function setExample($example)
    {
        $this->container['example'] = $example;

        return $this;
    }

    /**
     * Gets cards
     *
     * @return \YCloud\Client\Model\WhatsappTemplateComponentCard[]|null
     */
    public function getCards()
    {
        return $this->container['cards'];
    }

    /**
     * Sets cards
     *
     * @param \YCloud\Client\Model\WhatsappTemplateComponentCard[]|null $cards **Required for type `CAROUSEL`.** Carousel templates support up to 10 carousel cards.
     *
     * @return self
     */
    public function setCards($cards)
    {

        if (!is_null($cards) && (count($cards) > 10)) {
            throw new \InvalidArgumentException('invalid value for $cards when calling WhatsappTemplateComponent., number of items must be less than or equal to 10.');
        }
        $this->container['cards'] = $cards;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


