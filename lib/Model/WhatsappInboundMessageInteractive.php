<?php
/**
 * WhatsappInboundMessageInteractive
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  YCloud\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * YCloud API
 *
 * The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.
 *
 * The version of the OpenAPI document: v2
 * Contact: service@ycloud.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace YCloud\Client\Model;

use \ArrayAccess;
use \YCloud\Client\ObjectSerializer;

/**
 * WhatsappInboundMessageInteractive Class Doc Comment
 *
 * @category Class
 * @description When a customer has interacted with your message, this object is included in the message object.
 * @package  YCloud\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WhatsappInboundMessageInteractive implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WhatsappInboundMessageInteractive';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'button_reply' => '\YCloud\Client\Model\WhatsappInboundMessageInteractiveButtonReply',
        'list_reply' => '\YCloud\Client\Model\WhatsappInboundMessageInteractiveListReply',
        'nfm_reply' => '\YCloud\Client\Model\WhatsappInboundMessageInteractiveNfmReply',
        'call_permission_reply' => '\YCloud\Client\Model\WhatsappInboundMessageInteractiveCallPermissionReply'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'button_reply' => null,
        'list_reply' => null,
        'nfm_reply' => null,
        'call_permission_reply' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'button_reply' => 'button_reply',
        'list_reply' => 'list_reply',
        'nfm_reply' => 'nfm_reply',
        'call_permission_reply' => 'call_permission_reply'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'button_reply' => 'setButtonReply',
        'list_reply' => 'setListReply',
        'nfm_reply' => 'setNfmReply',
        'call_permission_reply' => 'setCallPermissionReply'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'button_reply' => 'getButtonReply',
        'list_reply' => 'getListReply',
        'nfm_reply' => 'getNfmReply',
        'call_permission_reply' => 'getCallPermissionReply'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_BUTTON_REPLY = 'button_reply';
    public const TYPE_LIST_REPLY = 'list_reply';
    public const TYPE_NFM_REPLY = 'nfm_reply';
    public const TYPE_CALL_PERMISSION_REPLY = 'call_permission_reply';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_BUTTON_REPLY,
            self::TYPE_LIST_REPLY,
            self::TYPE_NFM_REPLY,
            self::TYPE_CALL_PERMISSION_REPLY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = $data['type'] ?? null;
        $this->container['button_reply'] = $data['button_reply'] ?? null;
        $this->container['list_reply'] = $data['list_reply'] ?? null;
        $this->container['nfm_reply'] = $data['nfm_reply'] ?? null;
        $this->container['call_permission_reply'] = $data['call_permission_reply'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The type of interactive message received. - `button_reply`: Sent when a customer clicks a button. - `list_reply`: Sent when a customer selects an item from a list. - `nfm_reply`: Sent when a customer responds to a WhatsApp Flow (Next Feature Messaging). - `call_permission_reply`: Sent when a customer responds to a call permission request.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets button_reply
     *
     * @return \YCloud\Client\Model\WhatsappInboundMessageInteractiveButtonReply|null
     */
    public function getButtonReply()
    {
        return $this->container['button_reply'];
    }

    /**
     * Sets button_reply
     *
     * @param \YCloud\Client\Model\WhatsappInboundMessageInteractiveButtonReply|null $button_reply button_reply
     *
     * @return self
     */
    public function setButtonReply($button_reply)
    {
        $this->container['button_reply'] = $button_reply;

        return $this;
    }

    /**
     * Gets list_reply
     *
     * @return \YCloud\Client\Model\WhatsappInboundMessageInteractiveListReply|null
     */
    public function getListReply()
    {
        return $this->container['list_reply'];
    }

    /**
     * Sets list_reply
     *
     * @param \YCloud\Client\Model\WhatsappInboundMessageInteractiveListReply|null $list_reply list_reply
     *
     * @return self
     */
    public function setListReply($list_reply)
    {
        $this->container['list_reply'] = $list_reply;

        return $this;
    }

    /**
     * Gets nfm_reply
     *
     * @return \YCloud\Client\Model\WhatsappInboundMessageInteractiveNfmReply|null
     */
    public function getNfmReply()
    {
        return $this->container['nfm_reply'];
    }

    /**
     * Sets nfm_reply
     *
     * @param \YCloud\Client\Model\WhatsappInboundMessageInteractiveNfmReply|null $nfm_reply nfm_reply
     *
     * @return self
     */
    public function setNfmReply($nfm_reply)
    {
        $this->container['nfm_reply'] = $nfm_reply;

        return $this;
    }

    /**
     * Gets call_permission_reply
     *
     * @return \YCloud\Client\Model\WhatsappInboundMessageInteractiveCallPermissionReply|null
     */
    public function getCallPermissionReply()
    {
        return $this->container['call_permission_reply'];
    }

    /**
     * Sets call_permission_reply
     *
     * @param \YCloud\Client\Model\WhatsappInboundMessageInteractiveCallPermissionReply|null $call_permission_reply call_permission_reply
     *
     * @return self
     */
    public function setCallPermissionReply($call_permission_reply)
    {
        $this->container['call_permission_reply'] = $call_permission_reply;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


