<?php
/**
 * WhatsappMessageOrderItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  YCloud\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * YCloud API
 *
 * The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.
 *
 * The version of the OpenAPI document: v2
 * Contact: service@ycloud.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace YCloud\Client\Model;

use \ArrayAccess;
use \YCloud\Client\ObjectSerializer;

/**
 * WhatsappMessageOrderItem Class Doc Comment
 *
 * @category Class
 * @package  YCloud\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WhatsappMessageOrderItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WhatsappMessageOrderItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'retailer_id' => 'string',
        'name' => 'string',
        'image' => '\YCloud\Client\Model\WhatsappMessageMedia',
        'amount' => '\YCloud\Client\Model\WhatsappMessageOrderAmount',
        'sale_amount' => '\YCloud\Client\Model\WhatsappMessageOrderAmount',
        'quantity' => 'int',
        'country_of_origin' => 'string',
        'importer_name' => 'string',
        'importer_address' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'retailer_id' => null,
        'name' => null,
        'image' => null,
        'amount' => null,
        'sale_amount' => null,
        'quantity' => 'int32',
        'country_of_origin' => null,
        'importer_name' => null,
        'importer_address' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'retailer_id' => 'retailer_id',
        'name' => 'name',
        'image' => 'image',
        'amount' => 'amount',
        'sale_amount' => 'sale_amount',
        'quantity' => 'quantity',
        'country_of_origin' => 'country_of_origin',
        'importer_name' => 'importer_name',
        'importer_address' => 'importer_address'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'retailer_id' => 'setRetailerId',
        'name' => 'setName',
        'image' => 'setImage',
        'amount' => 'setAmount',
        'sale_amount' => 'setSaleAmount',
        'quantity' => 'setQuantity',
        'country_of_origin' => 'setCountryOfOrigin',
        'importer_name' => 'setImporterName',
        'importer_address' => 'setImporterAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'retailer_id' => 'getRetailerId',
        'name' => 'getName',
        'image' => 'getImage',
        'amount' => 'getAmount',
        'sale_amount' => 'getSaleAmount',
        'quantity' => 'getQuantity',
        'country_of_origin' => 'getCountryOfOrigin',
        'importer_name' => 'getImporterName',
        'importer_address' => 'getImporterAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['retailer_id'] = $data['retailer_id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['image'] = $data['image'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['sale_amount'] = $data['sale_amount'] ?? null;
        $this->container['quantity'] = $data['quantity'] ?? null;
        $this->container['country_of_origin'] = $data['country_of_origin'] ?? null;
        $this->container['importer_name'] = $data['importer_name'] ?? null;
        $this->container['importer_address'] = $data['importer_address'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 60)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 60.";
        }

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets retailer_id
     *
     * @return string|null
     */
    public function getRetailerId()
    {
        return $this->container['retailer_id'];
    }

    /**
     * Sets retailer_id
     *
     * @param string|null $retailer_id Content ID for an item in the order from your catalog.
     *
     * @return self
     */
    public function setRetailerId($retailer_id)
    {
        $this->container['retailer_id'] = $retailer_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The item's name to be displayed to the user. Cannot exceed 60 characters.
     *
     * @return self
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 60)) {
            throw new \InvalidArgumentException('invalid length for $name when calling WhatsappMessageOrderItem., must be smaller than or equal to 60.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets image
     *
     * @return \YCloud\Client\Model\WhatsappMessageMedia|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param \YCloud\Client\Model\WhatsappMessageMedia|null $image image
     *
     * @return self
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return \YCloud\Client\Model\WhatsappMessageOrderAmount
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \YCloud\Client\Model\WhatsappMessageOrderAmount $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets sale_amount
     *
     * @return \YCloud\Client\Model\WhatsappMessageOrderAmount|null
     */
    public function getSaleAmount()
    {
        return $this->container['sale_amount'];
    }

    /**
     * Sets sale_amount
     *
     * @param \YCloud\Client\Model\WhatsappMessageOrderAmount|null $sale_amount sale_amount
     *
     * @return self
     */
    public function setSaleAmount($sale_amount)
    {
        $this->container['sale_amount'] = $sale_amount;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity The number of items in the order.
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets country_of_origin
     *
     * @return string|null
     */
    public function getCountryOfOrigin()
    {
        return $this->container['country_of_origin'];
    }

    /**
     * Sets country_of_origin
     *
     * @param string|null $country_of_origin Required if `catalog_id` is not present. The country of origin of the product.
     *
     * @return self
     */
    public function setCountryOfOrigin($country_of_origin)
    {
        $this->container['country_of_origin'] = $country_of_origin;

        return $this;
    }

    /**
     * Gets importer_name
     *
     * @return string|null
     */
    public function getImporterName()
    {
        return $this->container['importer_name'];
    }

    /**
     * Sets importer_name
     *
     * @param string|null $importer_name Required if `catalog_id` is not present. Name of the importer company.
     *
     * @return self
     */
    public function setImporterName($importer_name)
    {
        $this->container['importer_name'] = $importer_name;

        return $this;
    }

    /**
     * Gets importer_address
     *
     * @return string|null
     */
    public function getImporterAddress()
    {
        return $this->container['importer_address'];
    }

    /**
     * Sets importer_address
     *
     * @param string|null $importer_address Required if `catalog_id` is not present. Address of importer company.
     *
     * @return self
     */
    public function setImporterAddress($importer_address)
    {
        $this->container['importer_address'] = $importer_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


